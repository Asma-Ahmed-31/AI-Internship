gc() # Clear memory to free up space before analysis

# -------------------------------------------------------------
#### 0. Create Output Folders ####
# -------------------------------------------------------------
# Folders 'Results' and 'Results/Plots' will be created where you save this script.
dir.create("Results", showWarnings = FALSE)
dir.create("Results/Plots", showWarnings = FALSE)

#### 1. Install and Load Required Packages ####
# Check if BiocManager is installed; install if missing
if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")

# Install required Bioconductor packages
BiocManager::install(c("limma", "AnnotationDbi", "hgu133a.db", "GEOquery", "pheatmap"))

# Install CRAN packages
install.packages(c("dplyr", "tibble", "ggplot2", "pheatmap", "data.table"))

# Load packages
library(AnnotationDbi)
library(hgu133a.db) # Annotation database for Affymetrix HG-U133A array (GPL96)
library(limma)
library(GEOquery) # To download and parse GEO data
library(dplyr)
library(tibble)
library(ggplot2)
library(pheatmap)
library(data.table)

# -------------------------------------------------------------
#### 2. Load and Prepare Expression and Phenotype Data (GSE20295) ####
# -------------------------------------------------------------

# *** ACTION REQUIRED: Replace the path below with the full path to your local file! ***
local_file_path <- "PATH/TO/YOUR/GSE20295_series_matrix (1).txt" 

# Use GEOquery to read the local series matrix file
gset <- getGEO(filename = local_file_path, GSEMatrix = TRUE)


# Select the main platform GPL96
if (length(gset) > 1) {
  idx <- which(sapply(gset, annotation) == "GPL96")
  if (length(idx) == 0) idx <- 1
  gset <- gset[[idx]]
} else {
  gset <- gset[[1]]
}

# Extract expression data and phenotype data
raw_data <- gset
processed_data <- exprs(gset)
phenotype_data <- pData(gset)

# -------------------------------------------------------------
#### 3. Select Samples for Substantia Nigra (SN) Comparison ####
# -------------------------------------------------------------
# Identify relevant samples (Substantia Nigra PD vs. Substantia Nigra Control)

# Filter samples by tissue/brain region (Substantia Nigra)
sn_samples_idx <- grep("Substantia nigra", phenotype_data$characteristics_ch1, ignore.case = TRUE)

if (length(sn_samples_idx) < 2) {
  stop("Insufficient Substantia Nigra samples found for comparison.")
}

# Subset the expression and phenotype data for SN samples only
processed_data_sn <- processed_data[, sn_samples_idx]
phenotype_data_sn <- phenotype_data[sn_samples_idx, ]

# Define groups based on disease state
disease_state <- sapply(strsplit(phenotype_data_sn$characteristics_ch1, "; "), `[`, 2) %>%
                  gsub("disease state: ", "", .) %>%
                  trimws()

# Create a factor for grouping
groups <- factor(disease_state,
                 levels = c("control", "Parkinson's disease"),
                 labels = c("Control", "PD"))

if (any(is.na(groups))) {
  stop("Check the 'characteristics_ch1' column structure; could not define groups correctly.")
}

# -------------------------------------------------------------
#### 4. Probe-to-Gene Mapping and Duplicate Handling ####
# -------------------------------------------------------------
probe_ids <- rownames(processed_data_sn)

# Map probe IDs to gene symbols
gene_symbols <- mapIds(
  hgu133a.db,               # Database used for mapping: hgu133a.db
  keys = probe_ids,         # Input probe IDs
  keytype = "PROBEID",      # Probe ID key type
  column = "SYMBOL",        # Desired annotation column (gene symbols)
  multiVals = "first"       # Return first match if multiple exist
)

# Merge annotation mapping with expression data
processed_data_df <- processed_data_sn %>%
  as.data.frame() %>%
  tibble::rownames_to_column("PROBEID") %>%
  dplyr::mutate(SYMBOL = gene_symbols[PROBEID]) %>%
  dplyr::relocate(SYMBOL, .after = PROBEID)

# Remove probes without valid gene symbol annotation
processed_data_df <- processed_data_df %>%
  dplyr::filter(!is.na(SYMBOL))

# Select only numeric expression columns
expr_only <- processed_data_df %>%
  dplyr::select(-PROBEID, -SYMBOL)

# Collapse multiple probes per gene using average expression (limma::avereps)
averaged_data <- limma::avereps(expr_only, ID = processed_data_df$SYMBOL)

# Final expression matrix
data <- as.matrix(averaged_data)

# -------------------------------------------------------------
#### 5. Differential Gene Expression Analysis (Limma) ####
# -------------------------------------------------------------
# Create design matrix
design <- model.matrix(~0 + groups)
colnames(design) <- levels(groups)

# Fit linear model to expression data
fit_1 <- lmFit(data, design)

# Define contrast: Parkinson's Disease vs. Control
contrast_matrix <- makeContrasts(PD_vs_Control = PD - Control, levels = design)

# Apply contrasts and compute moderated statistics
fit_contrast <- contrasts.fit(fit_1, contrast_matrix)
fit_2 <- eBayes(fit_contrast)

# Extract list of all DEGs
deg_results <- topTable(fit_2,
                        coef = "PD_vs_Control",
                        number = Inf,
                        adjust.method = "BH")

# -------------------------------------------------------------
#### 6. Classify and Save DEGs ####
# -------------------------------------------------------------
# Define DEGs using thresholds: Adjusted P-value < 0.05 AND |logFC| > 1
deg_results$threshold <- as.factor(ifelse(
  deg_results$adj.P.Val < 0.05 & deg_results$logFC > 1, "Upregulated",
  ifelse(deg_results$adj.P.Val < 0.05 & deg_results$logFC < -1, "Downregulated",
         "Not significant")
))

# Subset genes by regulation direction
upregulated <- subset(deg_results, threshold == "Upregulated")
downregulated <- subset(deg_results, threshold == "Downregulated")
deg_updown <- rbind(upregulated, downregulated)

# Save DEG results as CSV files in the Results folder
write.csv(deg_results, file = "Results/DEGs_Results_Complete.csv")
write.csv(upregulated, file = "Results/Upregulated_DEGs.csv")
write.csv(downregulated, file = "Results/Downregulated_DEGs.csv")

# -------------------------------------------------------------
#### 7. Data Visualization ####
# -------------------------------------------------------------

# --- Volcano Plot ---
png("Results/Plots/Volcano_Plot.png", width = 2000, height = 1500, res = 300)

ggplot(deg_results, aes(x = logFC, y = -log10(adj.P.Val), color = threshold)) +
  geom_point(alpha = 0.7, size = 2) +
  scale_color_manual(values = c("Upregulated" = "red",
                                "Downregulated" = "blue",
                                "Not significant" = "grey")) +
  geom_hline(yintercept = -log10(0.05), linetype = "dashed", color = "black") + 
  geom_vline(xintercept = c(-1, 1), linetype = "dashed", color = "black") +      
  theme_minimal(base_size = 14) +
  labs(title = "Volcano Plot: PD vs Control (Substantia Nigra)",
       x = expression(log[2]~"Fold Change"),
       y = expression(-log[10]~"Adjusted P-value"),
       color = "Regulation") +
  theme(plot.title = element_text(hjust = 0.5))

dev.off()
print("Volcano Plot saved to Results/Plots/Volcano_Plot.png")

# --- Heatmap of Top 25 DEGs ---

# Select top 25 DEGs (if fewer than 25, use all)
top_n <- min(25, nrow(deg_updown))
top_genes <- head(rownames(deg_updown[order(deg_updown$adj.P.Val), ]), top_n)
heatmap_data <- data[top_genes, ]
heatmap_data_scaled <- t(scale(t(heatmap_data)))

# Create annotation bar for samples
annotation_col <- data.frame(Group = groups)
rownames(annotation_col) <- colnames(heatmap_data)

# Save heatmap as PNG
png("Results/Plots/Heatmap_Top25_DEGs.png", width = 2500, height = 2500, res = 300)

pheatmap(
  heatmap_data_scaled,
  cluster_rows = TRUE,
  cluster_cols = TRUE,
  show_rownames = TRUE,
  show_colnames = FALSE,
  annotation_col = annotation_col,
  color = colorRampPalette(c("blue", "white", "red"))(100),
  fontsize_row = 8,
  fontsize_col = 8,
  main = paste("Heatmap of Top", top_n, "Differentially Expressed Genes")
)

dev.off()
print(paste("Heatmap saved to Results/Plots/Heatmap_Top", top_n, "_DEGs.png", sep=""))
